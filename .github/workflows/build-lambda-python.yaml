name: build-lambda-function

on:
  workflow_call:
    inputs:
      region:
        required: true
        type: string
        description: "AWS region"
      name:
        required: true
        type: string
      lambda-function-name:
        required: true
        type: string
      lambda-layer-name:
        required: false
        type: string
        default: ""
      uploads:
        required: false
        type: string
        default: ""
      env:
        required: false
        type: string
        default: "dev"
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      is_modified: ${{ steps.filter.outputs.code_changes == 'true' || steps.filter.outputs.env_changes == 'true' || steps.filter.outputs.version_changes == 'true' || steps.filter.outputs.dependency_changes == 'true'}}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          # detect changes for current branch
          base: ${{ github.ref }}
          filters: |
            code_changes:
              - 'functions/${{ inputs.name }}/**'
            env_changes:
              - 'env/${{ inputs.env }}/${{ inputs.name }}.env'
            dependency_changes:
              - 'requirements.txt'
            version_changes:
              - version

  build-and-upload:
    needs: check_changes
    if: ${{ needs.check_changes.outputs.is_modified == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Build Lambda package
        run: |
          mkdir lambda_package
          cp -r functions/${{ inputs.name }}/* lambda_package/
          cd lambda_package
          zip -r ../lambda_package.zip .
      
      - name: Get ARN by layer name
        id: get_layer_arn
        run: |
          if [ -n "${{ inputs.lambda-layer-name }}" ]; then
            layer_arn=$(aws lambda list-layer-versions --layer-name ${{ inputs.lambda-layer-name }} --region ${{ inputs.region }} --query 'LayerVersions[0].LayerVersionArn' --output text)
            echo ::set-output name=layer_arn::$layer_arn
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-secret-access-key }}
        
      - name: Load env file
        id: readenv
        env:
          env_file: env/${{ inputs.env }}/${{ inputs.name }}.env
        run: echo "::set-output name=env::$(cat ${{env.env_file}} | tr '\n' ',')"

      - name: Deploy
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.aws-access-key-id }}
          aws_secret_access_key: ${{ secrets.aws-secret-access-key }}
          aws_region: ${{ inputs.region }}
          function_name: ${{ inputs.lambda-function-name }}
          zip_file: lambda_package.zip
          layers: ${{ steps.get_layer_arn.outputs.layer_arn }}
          environment: ${{ steps.readenv.outputs.env }}